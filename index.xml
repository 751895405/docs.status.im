<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Status Developer Documentation</title>
    <link>http://docs.status.im/</link>
    <description>Recent content on Status Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://docs.status.im/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>API Introduction</title>
      <link>http://docs.status.im/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.status.im/</guid>
      <description>Introduction DOCUMENTATION STILL WORK IN PROGRESS
Welcome to the Status API! Tread carefully, for you tread on the dreams of a better web.
Status allows users to interact with a wide array of Decentralized Applications (DApps) using the same intuitive chat interface (it also does a bunch of other things, but we&amp;rsquo;ll focus on this aspect for now). In the near future, Status users will be able to have group chats where most of the participants are DApp chatbots.</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>http://docs.status.im/tutorials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.status.im/tutorials/</guid>
      <description>Tutorials Overview Just before we get started, it&amp;rsquo;s well worth acquainting yourself with some of our terminology so you&amp;rsquo;ll be able to make sense of it all. This anatomy establishes the different sections of the chat interface and establishes a common verbiage. The main components are:
 Message Input Keyboard Suggestions  Please take some time to familiarize yourself with all the areas and the different configurations possible depending on what you want to do.</description>
    </item>
    
    <item>
      <title>Status API Reference</title>
      <link>http://docs.status.im/status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.status.im/status/</guid>
      <description>status (API) https://github.com/status-im/status-react/blob/develop/resources/status.js#L160
status Remember, this is all about Ethereum. Anywhere.
Below you will find the formal API specification from which you can glean all the information you need to make your DApp truly mobile, with native mobile commands and an intuitive chat interface through which users can actually see, interact with, and pay for the services you offer.
status.command  A really simple template:
 status.command({ name: &amp;quot;hello&amp;quot;, title: &amp;quot;HelloBot&amp;quot;, description: &amp;quot;Helps you say hello&amp;quot;, color: &amp;quot;#7099e6&amp;quot;, preview: function () { return status.</description>
    </item>
    
    <item>
      <title>Web3 API Reference</title>
      <link>http://docs.status.im/web3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://docs.status.im/web3/</guid>
      <description>web3 (API) To make your √êapp work on Ethereum, you can use the web3 object provided by the web3.js library. Under the hood it communicates to a local node through RPC calls. web3.js works with any Ethereum node, which exposes an RPC layer.
web3 contains the eth object - web3.eth (for specifically Ethereum blockchain interactions) and the shh object - web3.shh (for Whisper interaction). Over time we&amp;rsquo;ll introduce other objects for each of the other web3 protocols.</description>
    </item>
    
  </channel>
</rss>